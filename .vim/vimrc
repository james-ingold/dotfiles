set autoindent                   " set auto-indenting on for programming
set showmatch                   " automatically show matching brackets. works like it does in bbedit.
set visualbell                  " turn on the "visual bell" - which is much quieter than the "audio blink"
set ruler                       " show the cursor position all the time
set laststatus=2                " make the last line where the status is two lines deep so you can see status always
set backspace=indent,eol,start  " make that backspace key work the way it should
set background=dark             " Use colours that work well on a dark background (Console is usually black)
set showmode                    " show the current mode
set clipboard=unnamed           " set clipboard to unnamed to access the system clipboard under windows
set hidden                      " No warnings about hidden buffers ie buffers with changes
syntax on                       " turn syntax highlighting on by default
set t_Co=16
set number
set relativenumber
set numberwidth=4
set signcolumn=yes
set hlsearch
set incsearch
set ignorecase
set smartcase
let g:mapleader = ','
let g:solarized_termcolors=256
let g:sort_motion_flags = 'ui'
"let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|dist\|bower_components'
set runtimepath+=/usr/local/opt/fzf
"Abbreviations
abbr funciton function
filetype off

" set the runtime path to include Vundle and initialize
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'ervandew/supertab'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'altercation/vim-colors-solarized'
Plugin 'trevordmiller/nova-vim'
Plugin 'vim-airline/vim-airline'
"Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'vim-syntastic/syntastic'
Plugin 'w0rp/ale'
Plugin 'scrooloose/nerdtree'
Plugin 'pangloss/vim-javascript'
Plugin 'tpope/vim-fugitive'
Plugin 'editorconfig/editorconfig-vim'  "use the editor config, luke
Plugin 'mattn/emmet-vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'airblade/vim-gitgutter' "see git changes in the gutter
Plugin 'valloric/youcompleteme'
Plugin 'klen/python-mode'   "python coding awesomeness
Plugin 'christoomey/vim-sort-motion'
Plugin 'kchmck/vim-coffee-script' "because sometime I enjoy the pain
Plugin 'suan/vim-instant-markdown' "previewing markdown
Plugin 'easymotion/vim-easymotion'
Plugin 'jiangmiao/auto-pairs'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'neilagabriel/vim-geeknote'
Plugin 'mileszs/ack.vim'
Plugin 'nikolas/ccl.vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'othree/html5.vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'junegunn/fzf.vim'
Plugin 'SirVer/ultisnips'
Plugin 'tpope/vim-unimpaired'
Plugin 'prettier/vim-prettier'
Plugin 'Quramy/tsuquyomi'
Plugin 'sjl/gundo.vim'
Plugin 'kana/vim-textobj-user'
Plugin 'Julian/vim-textobj-brace'
Plugin 'digitaltoad/vim-pug'
" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
"tabstop is width of tab character
"expandtab causes spaces to be used in place of tab character
"softtabstop for backspace to remove 2 whitespaces
set shiftwidth=2 softtabstop=2 expandtab
set wrap
set textwidth=80
set linebreak
set formatoptions=qrn1
set colorcolumn=160
set clipboard=unnamed
nnoremap ; :
"Key Remaps
"Remove all trailing whitespace by pressing F5
"http://vi.stackexchange.com/questions/454/whats-the-simplest-way-to-strip-trailing-whitespace-from-all-lines-in-a-file
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>
highlight Cursor ctermfg=15 ctermbg=21 guifg=#ffffff guibg=#0000ff
" Set Syntastic stuff
" ------------------------------

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_loc_list_height = 5
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 1
"let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_javascript_eslint_args = "--fix %"

"let g:syntastic_error_symbol = '‚ùå'
"let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
"let g:syntastic_warning_symbol = '‚ö†Ô∏è'
"let g:syntastic_style_warning_symbol = 'üí©'
"let g:syntastic_html_tidy_ignore_errors = [
"        \'proprietary attribute "ng-',
"        \'<raf-item>',
"        \'<ng-*>',
"        \'proprietary attribute "c-',
"        \'proprietary attribute "fixed-'
    \]
"let syntastic_mode_map = { 'passive_filetypes': ['html'] }
"highlight link SyntasticErrorSign SignColumn
"highlight link SyntasticWarningSign SignColumn
"highlight link SyntasticStyleErrorSign SignColumn
"highlight link SyntasticStyleWarningSign SignColumn
let g:tsuquyomi_disable_quickfix = 1

let g:ale_sign_column_always = 1
let g:ale_sign_error = '‚ùå '
let g:ale_sign_warning = '‚ö†Ô∏è'
" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
let g:ale_fixers = {
  \  'javascript': ['eslint'],
  \  'typescript': ['tslint']
  \ }
let g:ale_fix_on_save = 1
let g:ale_linters = {
  \ 'javascript': ['eslint'],
  \ 'html': []
  \ }
let g:ale_javascript_eslint_suppress_missing_config = 1
let g:ale_lint_on_text_changed = 'never' "trying to fix ale fucking up
let g:ale_lint_on_enter = 0 "ditto
"Youcompleteme settings
let g:ycm_filetype_blacklist = {
    \'typescript' : 1
    \}
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<tab>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']
let g:UltiSnipsSnippetsDir='~/.vim/_snippets'
let g:UltiSnipsSnippetDirectories=['_snippets']
let g:UltiSnipsUsePythonVersion = 2
" VIMDiff Settings
map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR> ",2 to get change from buffer number 2"
map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>
" FZF
nnoremap <C-p> :GFiles<CR>
nnoremap <C-P> :Files<CR>
nnoremap <C-b> :Buffers<CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <silent> <leader>ga :BCommits<CR>
nnoremap <silent> <leader>: :BLines<CR>
nnoremap <silent> <C-r> :BTags<CR>
nnoremap <silent> <leader>O :Tags<CR>
let g:fzf_tags_command = 'ctags -R --exclude={node_modules,.git,bower_components,dist,docs,snippets,tests,utils,assets}'

nnoremap <F5> :GundoToggle<CR>

" Theme
" -----------------------------
syntax enable
set background=dark
"colorscheme solarized
colorscheme nova

"Python-Mode Settings
"--------------------
let g:pymode_folding = 0

" NERDTree Settings
nmap <silent> <C-s> :NERDTreeToggle<CR>
let g:NERDTreeMapOpenVSplit=',v'
let g:NERDTreeDirArrows = 1
let g:NERDTreeQuitOnOpen=1
" Coffee Script Settings
autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" Markdown Preview Options
let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0
" Airline settings
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:airline#extensions#tabline#enabled = 1 " just show the file name

"number toggle
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
augroup END

let g:GeeknoteFormat='markdown'
"https://vi.stackexchange.com/questions/2129/fastest-way-to-switch-to-a-buffer-in-vim
"pressing ,b will list the available buffers and prepare :b for you, use buffer number or name to go to buffer
nnoremap <Leader>b :ls<CR>:b<Space>

"Replace ack with ripgrep
if executable('rg') "used to be ag for silver searcher
    let g:ackprg = 'rg --vimgrep'
    set grepprg=rg\ --vimgrep
endif

"Don't jump to first search result automatically
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
"Backup and swap files
" create directory if needed
if !isdirectory($HOME.'/.vim/files') && exists('*mkdir')
  call mkdir($HOME.'/.vim/files')
  call mkdir($HOME.'/.vim/files/tmp')
  call mkdir($HOME.'/.vim/files/info')
endif
" swap files
set directory =$HOME/.vim/files/tmp
set viminfo ='100,h,n$HOME/.vim/files/info/viminfo
set updatecount =100
set updatetime =4000
set noswapfile

" "Uppercase word" mapping.
"
" This mapping allows you to press <c-u> in insert mode to convert the current
" word to uppercase.  It's handy when you're writing names of constants and
" don't want to use Capslock.
"
" To use it you type the name of the constant in lowercase.  While your
" cursor is at the end of the word, press <c-u> to uppercase it, and then
" continue happily on your way:
"
"                            cursor
"                            v
"     max_connections_allowed|
"     <c-u>
"     MAX_CONNECTIONS_ALLOWED|
"                            ^
"                            cursor
"
" It works by exiting out of insert mode, recording the current cursor location
" in the z mark, using gUiw to uppercase inside the current word, moving back to
" the z mark, and entering insert mode again.
"
" Note that this will overwrite the contents of the z mark.  I never use it, but
" if you do you'll probably want to use another mark.
inoremap <C-u> <esc>mzgUiw`za
"Bubbling Lines
" Bubble single lines
nnoremap <C-Up> ddkP
nnoremap <C-Down> ddp
" Bubble multiple lines
vnoremap <C-Up> xkP`[V`]
vnoremap <C-Down> xp`[V`]
"Quick editing
nnoremap <leader>et :vsplit ~/.tmux.conf<cr>
nnoremap <leader>ev :vsplit ~/Documents/Repositories/dotfiles/.vim/vimrc<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
"Hard mode
nnoremap <Left> <nop>
vnoremap <Left> <nop>
inoremap <Left> <nop>
nnoremap <Right> <nop>
vnoremap <Right> <nop>
inoremap <Right> <nop>
nnoremap <Down> <nop>
vnoremap <Down> <nop>
inoremap <Down> <nop>
nnoremap <Up> <nop>
vnoremap <Up> <nop>
inoremap <Up> <nop>

"Typescript otions
let g:typescript_indent_disable = 1
"Indent guides by default
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1

"Navigate wrapped lines with command and vi keys
vnoremap <C-j> gj
vnoremap <C-k> gk
vnoremap <D-4> g$
vnoremap <D-6> g^
vnoremap <D-0> g^
nnoremap <D-j> gj
nnoremap <D-k> gk
nnoremap <D-4> g$
nnoremap <D-6> g^
nnoremap <D-0> g^

"Fugitive
augroup fugitiveautocmd
    autocmd!
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" Spellcheck
nnoremap <silent> <leader>s :set spell!<CR>
