set encoding=utf-8
scriptencoding utf-8
set autoindent                   " set auto-indenting on for programming
set showmatch                   " automatically show matching brackets. works like it does in bbedit.
set visualbell                  " turn on the "visual bell" - which is much quieter than the "audio blink"
set ruler                       " show the cursor position all the time
set laststatus=2                " make the last line where the status is two lines deep so you can see status always
set backspace=indent,eol,start  " make that backspace key work the way it should
set background=dark             " Use colours that work well on a dark background (Console is usually black)
set showmode                    " show the current mode
set clipboard=unnamed           " set clipboard to unnamed to access the system clipboard under windows
set hidden                      " No warnings about hidden buffers ie buffers with changes
syntax on                       " turn syntax highlighting on by default
set t_Co=16
if &term ==# 'screen'
  set t_Co=256
endif
set number
set relativenumber
set numberwidth=4
set signcolumn=yes
set hlsearch
set incsearch
set ignorecase
set smartcase
set infercase "infer case for autocompletion
set timeoutlen=1000 ttimeoutlen=0
set wildmenu
set wildmode=full
"set completeopt-=preview
"set nobackup
"set nowritebackup
let g:python_host_prog = '/usr/local/bin/python2.7'
let g:python3_host_prog = '/Library/Frameworks/Python.framework/Versions/3.6/bin/python3'
" let g:ycm_server_python_interpreter = '/usr/local/bin/python'
let g:mapleader = ','
let g:solarized_termcolors=256
let g:sort_motion_flags = 'ui'
if has('nvim')
    set inccommand=
    set termguicolors
    set guicursor=
    let g:elite_mode=1
endif
"let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|dist\|bower_components'
set runtimepath+=/usr/local/opt/fzf
"Abbreviations
abbr funciton function
filetype off
set packpath^=~/.vim
function! PackInit() abort
  packadd minpac
  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " set the runtime path to include Vundle and initialize
  " set runtimepath+=~/.vim/bundle/Vundle.vim
  " call vundle#begin()

  " let Vundle manage Vundle, required
  " Plugin 'VundleVim/Vundle.vim'

  "Plugin 'altercation/vim-colors-solarized'
  "Plugin 'ctrlpvim/ctrlp.vim'
  "Plugin 'vim-syntastic/syntastic'
  "Plugin 'scrooloose/nerdcommenter'
  " General VIM
  " :BD keeps window intact
  call minpac#add('qpkorr/vim-bufkill')
  call minpac#add('tpope/vim-eunuch')
  " Complete
  " call minpac#add('valloric/youcompleteme')
  " call minpac#add('Shougo/deoplete.nvim')
  " Plugin 'Shougo/neoinclude.vim'
  call minpac#add('neoclide/coc.nvim', {'branch': 'release'})

  "HTML
  call minpac#add('docunext/closetag.vim')

  call minpac#add('mattn/emmet-vim')
  call minpac#add('klen/python-mode')   "python coding awesomeness
  call minpac#add('ervandew/supertab')
  call minpac#add('trevordmiller/nova-vim')
  call minpac#add('vim-airline/vim-airline')
  call minpac#add('tpope/vim-surround')
  call minpac#add('tpope/vim-commentary')
  call minpac#add('vim-airline/vim-airline-themes')
  call minpac#add('w0rp/ale')
  call minpac#add('scrooloose/nerdtree')
  call minpac#add('editorconfig/editorconfig-vim')  "use the editor config, luke
  "Plugin 'christoomey/vim-sort-motion'
  "call minpac#add('suan/vim-instant-markdown') "previewing markdown
  call minpac#add('iamcco/markdown-preview.nvim')
  "Plugin 'easymotion/vim-easymotion'
  call minpac#add('jiangmiao/auto-pairs')
  "Plugin 'neilagabriel/vim-geeknote'
  call minpac#add('mileszs/ack.vim')
  call minpac#add('nathanaelkane/vim-indent-guides')
  call minpac#add('junegunn/fzf.vim')
  call minpac#add('SirVer/ultisnips')
  call minpac#add('tpope/vim-unimpaired')
  call minpac#add('prettier/vim-prettier')
  "Plugin 'sjl/gundo.vim'
  call minpac#add('kana/vim-textobj-user')
  "Plugin 'Julian/vim-textobj-brace'
  call minpac#add('Shougo/vimproc.vim')
  call minpac#add('mxw/vim-jsx')
  call minpac#add('posva/vim-vue')
  call minpac#add('vim-scripts/Vim-R-plugin')
  call minpac#add('nelstrom/vim-visual-star-search')
  " Text Editing
  call minpac#add('reedes/vim-pencil')
  call minpac#add('reedes/vim-textobj-sentence')
  call minpac#add('reedes/vim-textobj-quote')
  " Git
  call minpac#add('tpope/vim-fugitive')
  call minpac#add('airblade/vim-gitgutter') "see git changes in the gutter
  " Javascript
  call minpac#add('jelera/vim-javascript-syntax')
  call minpac#add('pangloss/vim-javascript')
  "Typescript
  call minpac#add('Quramy/tsuquyomi')
  call minpac#add('leafgarland/typescript-vim')
  "Misc FileType Plugins
  call minpac#add('hail2u/vim-css3-syntax')
  call minpac#add('kchmck/vim-coffee-script') "because sometime I enjoy the pain
  call minpac#add('othree/html5.vim')
  call minpac#add('digitaltoad/vim-pug')
  "call minpac#add('ekalinin/Dockerfile.vim')
  call minpac#add('ludovicchabant/vim-gutentags')
  call minpac#add('TaDaa/vimade')
  call minpac#add('vim-scripts/AnsiEsc.vim')
  call minpac#add('jeetsukumaran/vim-pythonsense')
  call minpac#add('neo4j-contrib/cypher-vim-syntax')

  "Solidity file type
  call minpac#add('tomlion/vim-solidity')
endfunction
" Define user commands for updating/cleaning the plugins.
" Each of them calls PackInit() to load minpac and register
" the information of plugins, then performs the task.
command! PackUpdate call PackInit() | call minpac#update('', {'do': 'call minpac#status()'})
command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus call PackInit() | call minpac#status()
  " All of your Plugins must be added before the following line
  " call vundle#end()
filetype plugin indent on

" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
"tabstop is width of tab character
"expandtab causes spaces to be used in place of tab character
"softtabstop for backspace to remove 2 whitespaces
set shiftwidth=2 softtabstop=2 expandtab
set wrap
set textwidth=80
set linebreak
set formatoptions=qrn1
set colorcolumn=160
set clipboard=unnamed
nnoremap ; :
"Key Remaps
"Remove all trailing whitespace by pressing F5
"http://vi.stackexchange.com/questions/454/whats-the-simplest-way-to-strip-trailing-whitespace-from-all-lines-in-a-file
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>
highlight Cursor ctermfg=15 ctermbg=21 guifg=#ffffff guibg=#0000ff
" Set Syntastic stuff
" ------------------------------

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_loc_list_height = 5
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 1
"let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_javascript_eslint_args = "--fix %"

"let g:syntastic_error_symbol = '‚ùå'
"let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
"let g:syntastic_warning_symbol = '‚ö†Ô∏è'
"let g:syntastic_style_warning_symbol = 'üí©'
"let g:syntastic_html_tidy_ignore_errors = [
"        \'proprietary attribute "ng-',
"        \'<raf-item>',
"        \'<ng-*>',
"        \'proprietary attribute "c-',
"        \'proprietary attribute "fixed-'
    \]
"let syntastic_mode_map = { 'passive_filetypes': ['html'] }
"highlight link SyntasticErrorSign SignColumn
"highlight link SyntasticWarningSign SignColumn
"highlight link SyntasticStyleErrorSign SignColumn
"highlight link SyntasticStyleWarningSign SignColumn
let g:tsuquyomi_disable_quickfix = 1

let g:ale_sign_column_always = 1
"let g:ale_sign_error = '‚ùå '
"let g:ale_sign_warning = '‚ö†Ô∏è'
" let g:ale_statusline_format = ['‚®â %d', '‚ö† %d', '‚úì']
" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
let g:ale_completion_enabled = 1
let g:ale_fixers = {
  \  'javascript': ['eslint'],
  \  'typescript': ['eslint'],
  \  'vue': ['eslint', 'prettier'],
  \  'json': ['fixjson']
  \ }
let g:ale_fix_on_save = 1
let g:ale_linters = {
  \ 'javascript': ['eslint'],
  \ 'typescript': ['eslint'],
  \ 'coffee': ['coffeelint'],
  \ 'pug': ['pug-lint'],
  \ 'vim': ['vint'],
  \ 'html': [],
  \ 'md': ['write-good', 'vale'],
  \ 'text': ['write-good', 'vale'],
  \ 'json': ['jsonlint']
  \ }
let g:ale_javascript_eslint_suppress_missing_config = 1
let g:ale_lint_on_text_changed = 0 "trying to fix ale fucking up
"let g:ale_lint_on_enter = 0 "ditto
let g:ale_lint_on_filetype_changed = 1
augroup ALECMD
    autocmd!
    autocmd InsertLeave * call ale#Queue(0)
    autocmd TextChanged * call ale#Queue(0)
augroup END
" nnoremap <silent> <leader>aj :ALENext<cr>
" nnoremap <silent> <leader>ak :ALEPrevious<cr>

nnoremap <silent> ]w :ALENext<cr>
nnoremap <silent> [w :ALEPrevious<cr>
nnoremap <silent> [W :ALEFirst<cr>
nnoremap <silent> ]W :ALELast<cr>
"deocomplete
" let g:deoplete#enable_at_startup = 1
"Youcompleteme settings
" let g:ycm_filetype_blacklist = {
"     \'typescript' : 1,
"     \'git': 1,
"     \ 'markdown': 1,
"     \ '': 1
"     \}
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<tab>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
" let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']
let g:UltiSnipsSnippetsDir='~/.vim/_snippets'
let g:UltiSnipsSnippetDirectories=['~/.vim/_snippets']
" let g:UltiSnipsUsePythonVersion = 2
" VIMDiff Settings
map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR> ",2 to get change from buffer number 2"
map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>
" FZF
nnoremap <C-p> :GFiles<CR>
nnoremap <C-P> :Files<CR>
nnoremap <C-b> :Buffers<CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <silent> <leader>ga :BCommits<CR>
nnoremap <silent> <leader>: :BLines<CR>
nnoremap <silent> <C-r> :BTags<CR>
nnoremap <silent> <leader>O :Tags<CR>
let g:fzf_tags_command = 'ctags -R --exclude={node_modules,.git,bower_components,dist,docs,snippets,tests,utils,assets,.serverless,App_Resources}'
"set tags=./tags,tags;

nnoremap <F5> :GundoToggle<CR>

" Theme
" -----------------------------
syntax enable
set background=dark
"colorscheme solarized
colorscheme nova

"Python-Mode Settings
"--------------------
let g:pymode_folding = 0

" NERDTree Settings
nmap <silent> <C-s> :NERDTreeToggle<CR>
let g:NERDTreeMapOpenVSplit=',v'
let g:NERDTreeDirArrows = 1
let g:NERDTreeQuitOnOpen=1
" Coffee Script Settings
autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" Markdown Preview Options
" let g:instant_markdown_slow = 1
" let g:instant_markdown_autostart = 0
" Airline settings
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:airline#extensions#tabline#enabled = 1 " just show the file name

"number toggle
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
augroup END

" let g:GeeknoteFormat='markdown'
"https://vi.stackexchange.com/questions/2129/fastest-way-to-switch-to-a-buffer-in-vim
"pressing ,b will list the available buffers and prepare :b for you, use buffer number or name to go to buffer
nnoremap <Leader>b :ls<CR>:b<Space>

"Replace ack with ripgrep
if executable('rg') "used to be ag for silver searcher
    let g:ackprg = 'rg --vimgrep'
    set grepprg=rg\ --vimgrep
endif

"Don't jump to first search result automatically
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
"Backup and swap files
" create directory if needed
if !isdirectory($HOME.'/.vim/files') && exists('*mkdir')
  call mkdir($HOME.'/.vim/files')
  call mkdir($HOME.'/.vim/files/tmp')
  call mkdir($HOME.'/.vim/files/info')
  call mkdir($HOME.'/.vim/files/undo')
endif
" swap files
set directory =$HOME/.vim/files/tmp
if !has('nvim')
    set viminfo ='100,h,n$HOME/.vim/files/info/viminfo
endif
set updatecount =100
"set updatetime =4000
set updatetime=750
set noswapfile
set undofile
if !has('nvim')
  set undodir=$HOME/.vim/files/undo
endif

augroup vimrc
  autocmd!
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END
" "Uppercase word" mapping.
"
" This mapping allows you to press <c-u> in insert mode to convert the current
" word to uppercase.  It's handy when you're writing names of constants and
" don't want to use Capslock.
"
" To use it you type the name of the constant in lowercase.  While your
" cursor is at the end of the word, press <c-u> to uppercase it, and then
" continue happily on your way:
"
"                            cursor
"                            v
"     max_connections_allowed|
"     <c-u>
"     MAX_CONNECTIONS_ALLOWED|
"                            ^
"                            cursor
"
" It works by exiting out of insert mode, recording the current cursor location
" in the z mark, using gUiw to uppercase inside the current word, moving back to
" the z mark, and entering insert mode again.
"
" Note that this will overwrite the contents of the z mark.  I never use it, but
" if you do you'll probably want to use another mark.
inoremap <C-u> <esc>mzgUiw`za
"Bubbling Lines
" Bubble single lines
nnoremap <C-Up> ddkP
nnoremap <C-Down> ddp
" Bubble multiple lines
vnoremap <C-Up> xkP`[V`]
vnoremap <C-Down> xp`[V`]
"Quick editing
nnoremap <leader>et :vsplit ~/.tmux.conf<cr>
nnoremap <leader>ev :vsplit ~/Documents/Repositories/dotfiles/.vim/vimrc<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
"Hard mode
nnoremap <Left> <nop>
vnoremap <Left> <nop>
inoremap <Left> <nop>
nnoremap <Right> <nop>
vnoremap <Right> <nop>
inoremap <Right> <nop>
nnoremap <Down> <nop>
vnoremap <Down> <nop>
inoremap <Down> <nop>
nnoremap <Up> <nop>
vnoremap <Up> <nop>
inoremap <Up> <nop>

"Typescript otions
let g:typescript_indent_disable = 1
"Indent guides by default
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1

"Navigate wrapped lines with command and vi keys
vnoremap <C-j> gj
vnoremap <C-k> gk
vnoremap <D-4> g$
vnoremap <D-6> g^
vnoremap <D-0> g^
nnoremap <D-j> gj
nnoremap <D-k> gk
nnoremap <D-4> g$
nnoremap <D-6> g^
nnoremap <D-0> g^

"Fugitive
augroup fugitiveautocmd
    autocmd!
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" Spellcheck
nnoremap <silent> <leader>s :set spell!<CR>

autocmd filetype crontab setlocal nobackup nowritebackup

"Easy Expansion of the Active File Directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

"only jsx files get jsx syntax
let g:jsx_ext_required = 1

"Emmet Settings / Only use emmet on html css
let g:user_emmet_install_global = 0
augroup emmetcmd
    autocmd!
    autocmd! FileType html,css EmmetInstall
augroup END

let g:gitgutter_override_sign_column_highlight = 0
augroup gitguttercmd
    autocmd!
    autocmd! BufWritePost * GitGutter
augroup END

"Mute highlighting until next search
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

"Fix the & command, always use && to includeflags on substitution
nnoremap & :&&<CR>
xnoremap & :&&<CR>

"AutoPairs
let g:AutoPairsShortcutJump='<leader>q'
let g:AutoPairsShortcutFastWrap='<leader>w'

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd,text call pencil#init()
                            \ | call textobj#quote#init()
                            \ | call textobj#sentence#init()
augroup END
let g:pencil#textwidth = 80

nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" vimade settings
" Barely fade inactive buffers
let g:vimade = {}
let g:vimade.fadelevel = 0.8
let g:vimade.checkInternal = 100 "increase default from 32ms to 100ms
let g:vimade_usecursorhold = 1

let g:gutentags_exclude_filetypes = ['vim', 'git', 'sh']

"as of patch 8.1.0360, Vim is bundled with the xdiff library and can create diffs internally. This can be more efficient than shelling out to an external program, and allows for a choice of diff algorithms. The ‚Äúpatience‚Äù algorithm often produces more human-readable output than the default
if has('patch-8.1.0360')
  set diffopt+=internal,algorithm:patience
endif

"coc-settings
"Use`[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" inoremap <silent><expr> <TAB>
"         \ pumvisible() ? "\<C-n>" :
"         \ <SID>check_back_space() ? "\<TAB>" :
"         \ coc#refresh()
"    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
"    function! s:check_back_space() abort
"         let col = col('.') - 1
"           return !col || getline('.')[col - 1]  =~# '\s'
"        endfunction

"   " Use <c-space> for trigger completion.
"   inoremap <silent><expr> <c-space> coc#refresh()
"   inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"
  " let g:coc_snippet_next = '<C-j>'
  " let g:coc_snippet_prev = '<C-k>'

" Terminal Mode
" if has('nvim')
"   tnoremap <Esc> <C-\><C-n>
"   tnoremap <C-v><Esc> <Esc>
" endif

" Open VSCode to the file that we're currently in, helpful when we need to do
" hardcore debugging
nnoremap <leader>vs :silent exec "!open vscodium://file/" . expand("%:p") . ":" . line(".") . ":" . col(".")<cr>:redraw!<cr>
